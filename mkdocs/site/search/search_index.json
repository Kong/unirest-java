{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Unirest-Java Documentation","text":""},{"location":"#install-with-maven","title":"Install With Maven:","text":"<pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;!-- https://mvnrepository.com/artifact/com.konghq/unirest-java-bom --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.konghq&lt;/groupId&gt;\n            &lt;artifactId&gt;unirest-java-bom&lt;/artifactId&gt;\n            &lt;version&gt;4.4.5&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n\n&lt;dependencies&gt;\n&lt;!-- https://mvnrepository.com/artifact/com.konghq/unirest-java-core --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.konghq&lt;/groupId&gt;\n    &lt;artifactId&gt;unirest-java-core&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- pick a JSON module if you want to parse JSON include one of these: --&gt;\n&lt;!-- Google GSON --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.konghq&lt;/groupId&gt;\n    &lt;artifactId&gt;unirest-modules-gson&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- OR maybe you like Jackson better? --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.konghq&lt;/groupId&gt;\n    &lt;artifactId&gt;unirest-modules-jackson&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"#upgrading-from-previous-versions","title":"Upgrading from Previous Versions","text":"<p>See the Upgrade Guide</p>"},{"location":"#changelog","title":"ChangeLog","text":"<p>See the Change Log for recent changes.</p>"},{"location":"#requests","title":"Requests","text":"<p>So you're probably wondering how using Unirest makes creating requests in Java easier, here is a basic POST request that will explain everything:</p> <pre><code>HttpResponse&lt;JsonNode&gt; response = Unirest.post(\"http://localhost/post\")\n      .header(\"accept\", \"application/json\")\n      .queryString(\"apiKey\", \"123\")\n      .field(\"parameter\", \"value\")\n      .field(\"firstname\", \"Gary\")\n      .asJson();\n</code></pre> <p>Requests are made when <code>as[Type]()</code> is invoked, possible types include <code>Json</code>, <code>String</code>, <code>Object</code> <code>Empty</code> and <code>File</code>.</p>"},{"location":"#route-parameters","title":"Route Parameters","text":"<p>Sometimes you want to add dynamic parameters in the URL, you can easily do that by adding a placeholder in the URL, and then by setting the route parameters with the <code>routeParam</code> function, like:</p> <p><pre><code>Unirest.get(\"http://localhost/{fruit}\")\n     .routeParam(\"fruit\", \"apple\")\n     .asString();\n\n// Results in `http://localhost/apple`\n</code></pre> The placeholder <code>{fruit}</code> will be replaced with <code>apple</code>.</p> <p>The placeholder's format is as easy as wrapping in curly braces: <code>{custom_name}</code></p> <p>All param values will be URL-Encoded for you</p>"},{"location":"#default-base-urls","title":"Default Base URLs","text":"<p>You  can configure a default base URL to be used for all requests that do not contain a full URL.</p> <p>This configuration will result in a GET to \"http://homestar.com/runner\" <pre><code>   Unirest.config().defaultBaseUrl(\"http://homestar.com\");\n\n   Unirest.get(\"/runner\").asString();\n</code></pre></p>"},{"location":"#query-parameters","title":"Query Parameters","text":"<p>Query-string params can be built up one by one</p> <pre><code>Unirest.get(\"http://localhost\")\n                .queryString(\"fruit\", \"apple\")\n                .queryString(\"droid\", \"R2D2\")\n                .asString();\n\n// Results in \"http://localhost?fruit=apple&amp;droid=R2D2\"\n</code></pre> <p>Again all param values will be URL-Encoded.</p> <p>You can also pass in query strings as arrays and maps: <pre><code>Unirest.get(\"http://localhost\")\n        .queryString(\"fruit\", Arrays.asList(\"apple\", \"orange\"))\n        .queryString(ImmutableMap.of(\"droid\", \"R2D2\", \"beatle\", \"Ringo\"))\n        .asString();\n\n // Results in \"http://localhost?fruit=apple&amp;fruit=orange&amp;droid=R2D2&amp;beatle=Ringo\"\n</code></pre></p>"},{"location":"#headers","title":"Headers","text":"<p>Request headers can be added with the <code>header</code> method. <pre><code>Unirest.get(\"http://localhost\")\n            .header(\"Accept\", \"application/json\")\n            .header(\"x-custom-header\", \"hello\")\n            .asString();\n</code></pre></p>"},{"location":"#basic-authentication","title":"Basic Authentication","text":"<p>Unirest exposes a shortcut for doing basic auth when you need to. Unirest handles the Base64 encoding part. Please make sure you are always doing this over HTTPS!</p> <pre><code>Unirest.get(\"http://localhost\")\n            .basicAuth(\"user\", \"password1!\")\n            .asString();\n\n// this adds the header \"Authorization: Basic dXNlcjpwYXNzd29yZDEh\"\n</code></pre>"},{"location":"#body-data","title":"Body Data","text":""},{"location":"#entity-bodies","title":"Entity Bodies","text":"<p>You can post entity objects as the full body easily. This is the default behavior of most REST services.</p> <p>Unless you specify otherwise the default <code>Content-Type</code> is <code>text/plain; charset=UTF-8</code></p> <pre><code>Unirest.post(\"http://localhost\")\n                .body(\"This is the entire body\")\n                .asEmpty();\n</code></pre> <p>You can also post as a Object that is serialized using a configured ObjectMapper. (see Object Mappers for implementation details. Unirest comes with a default mapper that will serialize to json using the popular Google Gson library <pre><code>Unirest.post(\"http://localhost\")\n            .header(\"Content-Type\", \"application/json\")\n            .body(new SomeUserObject(\"Bob\"))\n            .asEmpty();\n\n// This will use Jackson to serialize the object into JSON.\n</code></pre></p>"},{"location":"#json-patch-bodies","title":"JSON Patch Bodies","text":"<p>Unirest has full native support for JSON Patch requests (RFC-6902 see http://jsonpatch.com/) Per the spec, the default <code>Content-Type</code> for json-patch is <code>application/json-patch+json</code></p> <p><pre><code>     Unirest.jsonPatch(\"http://localhost\")\n            .add(\"/fruits/-\", \"Apple\")\n            .remove(\"/bugs\")\n            .replace(\"/lastname\", \"Flintstone\")\n            .test(\"/firstname\", \"Fred\")\n            .move(\"/old/location\", \"/new/location\")\n            .copy(\"/original/location\", \"/new/location\")\n            .asJson();\n</code></pre> will send a request with a body of <pre><code>  [\n     {\"op\":\"add\",\"path\":\"/fruits/-\",\"value\":\"Apple\"},\n     {\"op\":\"remove\",\"path\":\"/bugs\"},\n     {\"op\":\"replace\",\"path\":\"/lastname\",\"value\":\"Flintstone\"},\n     {\"op\":\"test\",\"path\":\"/firstname\",\"value\":\"Fred\"},\n     {\"op\":\"move\",\"path\":\"/new/location\",\"from\":\"/old/location\"},\n     {\"op\":\"copy\",\"path\":\"/new/location\",\"from\":\"/original/location\"}\n  ]\n</code></pre></p>"},{"location":"#basic-forms","title":"Basic Forms","text":"<p>Basic http name value body params can be passed with simple field calls. The <code>Content-Type</code> for this type of request is defaulted to  <code>application/x-www-form-urlencoded</code></p> <pre><code>Unirest.post(\"http://localhost\")\n       .field(\"fruit\", \"apple\")\n       .field(\"droid\", \"R2D2\")\n       .asEmpty();\n\n  // This will post a simple name-value pair body the same as a HTML form. This looks like\n  // `fruit=apple&amp;droid=R2D2'\n</code></pre>"},{"location":"#file-uploads","title":"File Uploads","text":"<p>You can also post binary data in a form. Like a file.</p> <p>The <code>Content-Type</code> for this type of request is defaulted to  <code>multipart/form-data</code></p> <pre><code>Unirest.post(\"http://localhost\")\n       .field(\"upload\", new File(\"/MyFile.zip\"))\n       .asEmpty();\n</code></pre> <p>For large files you may want to use a InputStream. Pass it a file name if you want one. We are using a FileInputStream here but it can actually be any kind of InputStream.</p> <pre><code>InputStream file = new FileInputStream(new File(\"/MyFile.zip\"));\n\nUnirest.post(\"http://localhost\")\n       .field(\"upload\", file, \"MyFile.zip\")\n       .asEmpty();\n</code></pre>"},{"location":"#upload-progress-monitoring","title":"Upload Progress Monitoring","text":"<p>If you are uploading large files you might want to provide some time of progress bar to a user. You can monitor this progress by providing a ProgresMonitor.</p> <pre><code>          Unirest.post(\"http://localhost\")\n                .field(\"upload\", new File(\"/MyFile.zip\"))\n                .uploadMonitor((field, fileName, bytesWritten, totalBytes) -&gt; {\n                    updateProgressBarWithBytesLeft(totalBytes - bytesWritten);\n                })\n                .asEmpty();\n</code></pre>"},{"location":"#asynchronous-requests","title":"Asynchronous Requests","text":"<p>Sometimes, well most of the time, you want your application to be asynchronous and not block, Unirest supports this in Java using anonymous callbacks, or direct method placement. All request types also support async versions.</p> <pre><code>CompletableFuture&lt;HttpResponse&lt;JsonNode&gt;&gt; future = Unirest.post(\"http://localhost/post\")\n  .header(\"accept\", \"application/json\")\n  .field(\"param1\", \"value1\")\n  .field(\"param2\", \"value2\")\n  .asJsonAsync(response -&gt; {\n        int code = response.getStatus();\n        JsonNode body = response.getBody();\n    });\n</code></pre>"},{"location":"#paged-requests","title":"Paged Requests","text":"<p>Sometimes services offer paged requests. How this is done is not standardized but Unirest proves a mechanism to follow pages until all have been consumed. You must provide two functions for extracting the next page. The first is to get the HttpResponse in the format you want, the other is to extract the <code>next</code> link from the response. The result is a <code>PagedList</code> of <code>HttpResponse&lt;T&gt;</code>. The paged list has some handy methods for dealing with the results. Here we are getting a paged list of Dogs where the <code>next</code> link is in the headers.</p> <pre><code>PagedList&lt;Doggos&gt; result =  Unirest.get(\"https://somewhere/dogs\")\n                .asPaged(\n                        r -&gt; r.asObject(Doggos.class),\n                        r -&gt; r.getHeaders().getFirst(\"nextPage\")\n                );\n</code></pre>"},{"location":"#client-certificates","title":"Client Certificates","text":"<p>In case you need to use a custom client certificate to call a service you can provide unirest with a custom keystore. You may either pass a KeyStore object or a path to a valid PKCS#12 keystore file.</p> <pre><code>Unirest.config()\n  .clientCertificateStore(\"/path/mykeystore.p12\", \"password1!\");\n\nUnirest.get(\"https://some.custom.secured.place.com\")\n                .asString();\n</code></pre>"},{"location":"#proxies","title":"Proxies","text":"<p>Sometimes you need to tunnel through a proxy. Unirest can be configured to do this. Note that authenticated proxies cannot be configured on a per-request basis unless you want to build it into the URL itself.</p> <pre><code>    // Configure with authentication:\n    Unirest.config().proxy(\"proxy.com\", 7777, \"username\", \"password1!\");\n\n    // or without\n    Unirest.config().proxy(\"proxy.com\", 7777);\n\n    // or pass it in the request. This will override any proxy done in the config\n    // currently only unauthenticated proxies work\n    Unirest.get(MockServer.GET)\n                    .proxy(\"proxy.com\", 7777)\n                    .asString();\n</code></pre>"},{"location":"#responses","title":"Responses","text":"<p>Unirest makes the actual request the moment you invoke of it's <code>as[type]</code> method. These methods also inform Unirest what type to map the response to. Options are <code>Empty</code>, <code>String</code>, <code>File</code>, <code>Object</code>, <code>byte</code> and <code>Json</code>.</p> <p>The response returns as a <code>HttpResponse&lt;T&gt;</code> where the <code>HttpResponse</code> object has all of the common response data like status and headers. The Body (if present) can be accessed via the desired type with the <code>.getBody()</code> method. </p>"},{"location":"#empty-responses","title":"Empty Responses","text":"<p>If you aren't expecting a body back, <code>asEmpty</code> is the easiest choice. You will still get back response information like status and headers.</p> <pre><code>HttpResponse response = Unirest.delete(\"http://localhost\").asEmpty()\n</code></pre>"},{"location":"#string-responses","title":"String Responses","text":"<p>The next easiest response type is String. You can do whatever you want with it after that.</p> <pre><code>String body = Unirest.get(\"http://localhost\")\n                     .asString()\n                     .getBody();\n</code></pre>"},{"location":"#object-mapped-responses","title":"Object Mapped Responses","text":"<p>Most of the time when consuming RESTful services you probably want to map the response into an object. </p> <p>For this you need to provide the Unirest configuration with a implementation of <code>ObjectMapper</code> (see Object Mappers for details.).</p> <p>If the response is JSON you are in luck and Unirest comes with a basic <code>JsonObjectMapper</code> basic on Google GSON  </p> <p>Before an <code>asObject(Class)</code> it is necessary to provide a custom implementation of the <code>ObjectMapper</code> interface (if you do not wish to use the default mapper). This should be done only the first time, as the instance of the ObjectMapper will be shared globally.</p> <p>Unirest offers a few plug-ins implementing popular object mappers like Jackson and Gson. See mvn central for details.</p> <p>For example,  <pre><code>// Response to Object\nBook book = Unirest.get(\"http://localhost/books/1\")\n                   .asObject(Book.class)\n                   .getBody();\n\n// Generic types can be resolved by using a GenericType subclass to avoid erasure\nList&lt;Book&gt; books = Unirest.get(\"http://localhost/books/\")\n              .asObject(new GenericType&lt;List&lt;Book&gt;&gt;(){})\n              .getBody();\n\nAuthor author = Unirest.get(\"http://localhost/books/{id}/author\")\n                       .routeParam(\"id\", bookObject.getId())\n                       .asObject(Author.class)\n                       .getBody();\n</code></pre></p>"},{"location":"#errors-in-object-or-json-parsing","title":"Errors in Object or JSON parsing","text":"<p>You can't always get what you want. And sometimes results you get from web services will not map into what you expect them to. When this happens with a <code>asObject</code> or <code>asJson</code> request the resulting body will be null, but the response object will contain a ParsingException that allows you to get the error and the original body for inspection.</p> <pre><code>UnirestParsingException ex = response.getParsingError().get();\n\nex.getOriginalBody(); // Has the original body as a string.\nex.getMessage(); // Will have the parsing exception.\nex.getCause(); // of course will have the original parsing exception itself.\n</code></pre>"},{"location":"#mapping-error-objects","title":"Mapping Error Objects","text":"<p>Sometimes with REST API's the service will return a error object that can be parsed. You can optionally map this into an POJO like</p> <pre><code>    HttpResponse&lt;Book&gt; book = Unirest.get(\"http://localhost/books/{id}\")\n                                     .asObject(Book.class);\n\n    // This will be null if there wasn't an error\n    Error er = book.mapError(Error.class);\n\n    // You can also take advantage of this inside of the ifFailure method\n    Unirest.get(\"http://localhost/books/{id}\")\n           .asObject(Book.class)\n           .ifFailure(Error.class, r -&gt; {\n                    Error e = r.getBody();\n           });\n</code></pre>"},{"location":"#mapping-one-body-type-to-another-without-an-object-mapper","title":"Mapping one body type to another without an object mapper","text":"<p>If you don't want to provide a full ObjectMapper implementation you may  use  a simple function to map the response</p> <pre><code>    int body = Unirest.get(\"http://httpbin/count\")\n                      .asString()\n                      .mapBody(Integer::valueOf);\n</code></pre>"},{"location":"#file-responses","title":"File Responses","text":"<p>Sometimes you just want to download a file, or maybe capture the response body into a file. Unirest can do both. Just tell Unirest where you want to put the file.</p> <pre><code>File result = Unirest.get(\"http://some.file.location/file.zip\")\n                .asFile(\"/disk/location/file.zip\")\n                .getBody();\n</code></pre>"},{"location":"#download-progress-monitoring","title":"Download Progress Monitoring","text":"<p>If you are uploading large files you might want to provide some time of progress bar to a user. You can monitor this progress by providing a ProgresMonitor.</p> <pre><code>          Unirest.get(\"http://localhost\")\n                .downLoadMonitor((b, fileName, bytesWritten, totalBytes) -&gt; {\n                    updateProgressBarWithBytesLeft(totalBytes - bytesWritten);\n                })\n                .asFile(\"/disk/location/file.zip\");\n</code></pre>"},{"location":"#json-responses","title":"JSON responses","text":"<p>Unirest offers a lightweight JSON response type when you don't need a full Object Mapper.</p> <pre><code>String result = Unirest.get(\"http://some.json.com\")\n                       .asJson()\n                       .getBody()\n                       .getObject()\n                       .getJSONObject(\"car\")\n                       .getJSONArray(\"wheels\")\n                       .get(0)\n</code></pre>"},{"location":"#large-responses","title":"Large Responses","text":"<p>Some response methods (<code>asString</code>, <code>asJson</code>) read the entire response stream into memory. In order to read the original stream and handle large responses you can use several functional methods like:</p> <pre><code>   Map r = Unirest.get(MockServer.GET)\n                .queryString(\"firstname\", \"Gary\")\n                .asObject(i -&gt; new Gson().fromJson(i.getContentReader(), HashMap.class))\n                .getBody();\n</code></pre> <p>or consumers:</p> <pre><code>         Unirest.get(MockServer.GET)\n                .thenConsumeAsync(r -&gt; {\n                       // something like writing a file to disk\n                });\n</code></pre>"},{"location":"#error-handling","title":"Error Handling","text":"<p>the HttpResponse object has a few handler methods that can be chained to deal with success and failure:    * <code>ifSuccess(Consumer&lt;HttpResponse&lt;T&gt;&gt; response)</code> will be called if the response was a 200-series response and any body processing (like <code>json</code> or <code>Object</code> was successful.    * <code>ifFailure(Consumer&lt;HttpResponse&gt; response</code> will be called if the status was 400+ or body processing failed.</p> <p>Putting them together might look like this: <pre><code>         Unirest.get(\"http://somewhere\")\n                .asJson()\n                .ifSuccess(response -&gt; someSuccessMethod(response))\n                .ifFailure(response -&gt; {\n                    log.error(\"Oh No! Status\" + response.getStatus());\n                    response.getParsingError().ifPresent(e -&gt; {\n                        log.error(\"Parsing Exception: \", e);\n                        log.error(\"Original body: \" + e.getOriginalBody());\n                    });\n                });\n</code></pre></p>"},{"location":"#caching","title":"Caching","text":"<p>Unirest offers a simple im memory response caching mechanism with a few options for entry expiration. This can be either be enabled with defaults, with expiration options or consumers may supply a custom cache backed by the cache of their choice. It is reccomended that in high load systems consumers back the cache with a dedicated cache implementation like EHCache or Guava.</p>"},{"location":"#basic-cache","title":"Basic cache:","text":"<pre><code>     Unirest.config().cacheResponses(true);\n\n     //These 1st response will be cached in this case:\n     Unirest.get(\"https://somwhere\").asString();\n     Unirest.get(\"https://somwhere\").asString();\n</code></pre>"},{"location":"#advanced-options","title":"Advanced Options:","text":"<p>You can use a builder to customize eviction rules:</p> <pre><code>   Unirest.config().cacheResponses(builder()\n               .depth(5) // Depth is the max number of entries cached\n               .maxAge(5, TimeUnit.MINUTES)); // Max age is how long the entry will be kept.\n</code></pre>"},{"location":"#custom-caches","title":"Custom Caches","text":"<p>You can also supply a custom cache by implementing the Cache Interface <pre><code>    public static void main(String[] args){\n       Unirest.config().cacheResponses(Cache.builder().backingCache(new GuavaCache()));\n    }\n\n    // Example backing cache using Guava\n    public static class GuavaCache implements Cache {\n            com.google.common.cache.Cache&lt;Key, HttpResponse&gt; regular = CacheBuilder.newBuilder().build();\n            com.google.common.cache.Cache&lt;Key, CompletableFuture&gt; async = CacheBuilder.newBuilder().build();\n            @Override\n            public &lt;T&gt; HttpResponse get(Key key, Supplier&lt;HttpResponse&lt;T&gt;&gt; fetcher) {\n                try {\n                    return regular.get(key, fetcher::get);\n                } catch (ExecutionException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            @Override\n            public &lt;T&gt; CompletableFuture getAsync(Key key, Supplier&lt;CompletableFuture&lt;HttpResponse&lt;T&gt;&gt;&gt; fetcher) {\n                try {\n                    return async.get(key, fetcher::get);\n                } catch (ExecutionException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n</code></pre></p>"},{"location":"#configuration","title":"Configuration","text":"<p>Previous versions of unirest had configuration split across several different places. Sometimes it was done on <code>Unirest</code>, sometimes it was done on <code>Option</code>, sometimes it was somewhere else. All configuration is now done through <code>Unirest.config()</code></p> <pre><code>    Unirest.config()\n           .connectTimeout(1000)\n           .proxy(new Proxy(\"https://proxy\"))\n           .setDefaultHeader(\"Accept\", \"application/json\")\n           .followRedirects(false)\n           .enableCookieManagement(false)\n           .addInterceptor(new MyCustomInterceptor());\n</code></pre> <p>Changing Unirest's config should ideally be done once, or rarely. Once Unirest has been activated configuration options that are involved in creating the client cannot be changed without an explicit shutdown or reset.</p>"},{"location":"#config-options","title":"Config Options","text":"Builder Method Impact Default <code>connectTimeout(int)</code> Sets the connection timeout for all requests in millis 10000 <code>proxy(proxy)</code> Sets a proxy object for negotiating proxy servers. Can include auth credentials <code>setDefaultHeader(String, String)</code> Sets  a default header. Will overwrite if it exists <code>setDefaultHeader(String, Supplier&lt;String&gt;)</code> Sets a default header by supplier. Good for setting trace tokens for microservice architectures. Will overwrite if it exists <code>addDefaultHeader(String, String)</code> Adds a default header. Multiple for the same name can exist <code>addDefaultHeader(String, Supplier&lt;String&gt;)</code> Add a default header by supplier. Good for setting trace tokens for microservice architectures. <code>setDefaultBasicAuth(String, String)</code> Add a default Basic Auth Header <code>followRedirects(boolean)</code> toggle following redirects true <code>enableCookieManagement(boolean)</code> toggle accepting and storing cookies true <code>cookieSpec(String)</code> set a cookie policy. Acceptable values: 'default' (same as Netscape), 'netscape', 'ignoreCookies', 'standard' (RFC 6265 interoprability profile) , 'standard-strict' (RFC 6265 strict profile) default <code>automaticRetries(boolean)</code> toggle disabling automatic retries (up to 4 times) for socket timeouts true <code>verifySsl(boolean)</code> toggle enforcing SSL true <code>clientCertificateStore(String,String)</code> Add a PKCS12 KeyStore by path for doing client certificates <code>clientCertificateStore(KeyStore,String)</code> Add a PKCS12 KeyStore for doing client certificates <code>connectionTTL(long,TimeUnit)</code> Total time to live (TTL)  defines maximum life span of persistent connections regardless of their expiration setting. No persistent connection will be re-used past its TTL value. -1 <code>connectionTTL(Duration)</code> Add total time to live (TTL) by Duration. Good for moderns Java APIs. -1 <code>errorHandler(Consumer&lt;HttpResponse&lt;?&gt;&gt; consumer)</code> Set a global error handler that will be invoked for any status &gt; 400 or a parsing error <code>interceptor(Interceptor value)</code> Set a global Interceptor handler that will be invoked before and after each request <code>defaultBaseUrl(String value)</code> Set a default base URL to be used for all requests that do not already contain a scheme"},{"location":"#global-interceptor","title":"Global Interceptor","text":"<p>You can set a global interceptor for your configuration. This is invoked before and after each request. This can be useful for logging or injecting common attributes.</p> <p>See Interceptor.java for details.</p>"},{"location":"#multiple-configurations","title":"Multiple Configurations","text":"<p>As usual, Unirest maintains a primary single instance. Sometimes you might want different configurations for different systems. You might also want an instance rather than a static context for testing purposes.</p> <pre><code>    // this returns the same instance used by Unirest.get(\"http://somewhere/\")\n    UnirestInstance unirest = Unirest.primaryInstance();\n    // It can be configured and used just like the static context\n    unirest.config().connectTimeout(5000);\n    String result = unirest.get(\"http://foo\").asString().getBody();\n\n    // You can also get a whole new instance\n    UnirestInstance unirest = Unirest.spawnInstance();\n</code></pre>"},{"location":"#object-mappers","title":"Object Mappers","text":"<p>Unirest offers a few different Object Mapper's based on popular JSON libraries (Jackson and GSON). <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.konghq&lt;/groupId&gt;\n    &lt;artifactId&gt;unirest-modules-jackson&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.konghq&lt;/groupId&gt;\n    &lt;artifactId&gt;unirest-modules-gson&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>If you have some other need you can supply your own Object mapper by implementing the <code>ObjectMapper</code> interface. It has only a few methods</p>"},{"location":"#metrics","title":"Metrics","text":"<p>Unirest has hooks for collecting metrics on your runtime code. This is a simple and lightweight framework that marks two events:    1. The moment just before the actual request is made    1. The moment just after the actual request is made</p> <p>Context information like method and request path are given to you so that you can collect based on whatever your needs are. In its simplest form it might look like this:</p> <pre><code>   Unirest.config().instrumentWith(requestSummary -&gt; {\n              long startNanos = System.nanoTime();\n              return (responseSummary,exception) -&gt; logger.info(\"path: {} status: {} time: {}\",\n                      requestSummary.getRawPath(),\n                      responseSummary.getStatus(),\n                      System.nanoTime() - startNanos);\n   });\n</code></pre> <p>By providing more feature rich UniMetric instances you could easily calculate averages per route, uptime, or other fun facts.</p>"},{"location":"#shutting-down","title":"Shutting Down","text":"<p>Unirest starts a background event loop and your Java application won't be able to exit until you manually shutdown all the threads by invoking:</p> <pre><code>Unirest.shutdown();\n</code></pre> <p>Once shutdown, using Unirest again will re-init the system</p>"}]}